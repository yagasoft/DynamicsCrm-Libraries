//         Project / File: Yagasoft.Libraries.Plugins / CrmSchemaBase.cs
// File generated by: CRM Code Generator - Ahmed Elsawalhy (Yagasoft.com)

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;

namespace Yagasoft.Libraries.Plugins
{

	#region Base code
		
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Class)]
	public class CrmEntityMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string SchemaName { get; private set; }
		public string DisplayName { get; private set; }

		public CrmEntityMappingAttribute(string logicalName, string schemaName, string displayName = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			LogicalName = logicalName;
			SchemaName = schemaName;
			DisplayName = displayName;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
	public class ReadOnlyFieldAttribute : Attribute
	{}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
	public class CrmFieldMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string RelatedEntity { get; private set; }

		public CrmFieldMappingAttribute(string logicalName, string relatedEntity = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			LogicalName = logicalName;
			RelatedEntity = relatedEntity;
		}
	}

	[DataContract]
	public enum EntityRelationRole
	{
		/// <summary>Specifies that the entity is the referencing entity. Value = 0.</summary>
		[EnumMember] Referencing,
		/// <summary>Specifies that the entity is the referenced entity. Value = 1.</summary>
		[EnumMember] Referenced,
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
	public class CrmRelationMappingAttribute : Attribute
	{
		public string SchemaName { get; private set; }
		public string RelatedEntityName { get; private set; }
		public EntityRelationRole? Role { get; private set; }

		public CrmRelationMappingAttribute(string schemaName, string relatedEntityName)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityName == null)
			{
				throw new ArgumentNullException("relatedEntityName");
			}

			SchemaName = schemaName;
			RelatedEntityName = relatedEntityName;
		}

		public CrmRelationMappingAttribute(string schemaName, string relatedEntityName, EntityRelationRole role)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityName == null)
			{
				throw new ArgumentNullException("relatedEntityName");
			}

			SchemaName = schemaName;
			RelatedEntityName = relatedEntityName;
			Role = role;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class MaxWidth : Attribute
	{
		public short Width { get; set; }

		public MaxWidth(short width)
		{
			Width = width;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class MaxHeight : Attribute
	{
		public short Height { get; set; }

		public MaxHeight(short height)
		{
			Height = height;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class OptionsetLanguageLabel
	{
		public int LanguageCode { get; set; }
		public string OptionsetLabel {get; set;}
	}

	public enum ClearMode
	{
		[EnumMember] Disabled,
		[EnumMember] Empty,
		[EnumMember] Convention,
		[EnumMember] Flag
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class LabelAttribute : Attribute
	{
		public string LabelFieldNames { get; set; }
		public string LogicalName { get; set; }
		public string IdFieldName { get; set; }
		public string FieldLogicalName { get; set; }

		public LabelAttribute(string labelFieldNames, string logicalName, string idFieldName, string fieldLogicalName)
		{
			LabelFieldNames = labelFieldNames;
			LogicalName = logicalName;
			IdFieldName = idFieldName;
			FieldLogicalName = fieldLogicalName;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public class LookupValue
	{
		public LookupEntity Entity
		{
			get
			{
				LookupEntity value;
				return Enum.TryParse(EntityName, true, out value) ? value : LookupEntity.Unknown;
			}
			set => EntityName = value.ToString().ToLower();
		}

		public string EntityName
		{
			get => entityName;
			set
			{
				if (value == null) { throw new ArgumentNullException(nameof(EntityName)); }
				entityName = value;
			}
		}
		private string entityName;

		public Guid Id { get; set; }

		public LookupValue()
		{ }

		public LookupValue(string entityName, Guid id)
		{
			EntityName = entityName;
			Id = id;
		}

		public LookupValue(LookupEntity entity, Guid id)
		{
			Entity = entity;
			Id = id;
		}
	}

	public enum LookupEntity
	{
		[EnumMember] Unknown,
		[EnumMember] Account,
		[EnumMember] Contact,
		[EnumMember] User,
		[EnumMember] Team
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class CrmGeneratorExtensions
	{
		/// <summary>
		/// Retrieves the label of the 'OptionSetValue' using the corresponding enum member constant
		/// and the language code given.
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.Enums.IndustryCode.Accounting'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The label corresponding to the enum constant and the language code.</returns>
		public static string GetLabel(this Enum enumMember, int languageCode = 1033)
		{
			var enumType = enumMember.GetType();
			var enumName = enumType.Name.Substring(0, enumType.Name.LastIndexOf("Enum"));
			var enumParentType = enumType.DeclaringType;

			if (enumParentType == null)
			{
				return null;
			}

			var enumsType = enumParentType.GetNestedType("Enums");
			Type labelsType;

			var isContract = false;

			if (enumsType == null)
			{
				labelsType = enumParentType.Assembly.GetType($"{enumParentType.Namespace}.{enumParentType.Name}Labels", false);
				isContract = true;
			}
			else
            {
				labelsType = enumsType.GetNestedType("Labels");
			}

			if (labelsType == null)
			{
				return null;
			}

			PropertyInfo property;

			if (isContract)
            {
				property = labelsType.GetProperty($"{enumName}Enum");
			}
			else
            {
				property = labelsType.GetProperty(enumName);
			}

			if (property == null)
			{
				return null;
			}

			IDictionary<int, string> labels = null;
			IDictionary<int, IDictionary<int, string>> locLabels;

			if (isContract)
			{
				locLabels = property.GetValue(Activator.CreateInstance(labelsType)) as IDictionary<int, IDictionary<int, string>>;
			}
			else
			{
				locLabels = property.GetValue(labelsType) as IDictionary<int, IDictionary<int, string>>;
			}

			if (locLabels?.TryGetValue(languageCode, out labels) != true)
            {
				return null;
			}

			if (labels.TryGetValue((int)Enum.Parse(enumType, enumMember.ToString()), out var label) != true)
            {
				return null;
			}

			return label;
		}

	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public partial class EntityContract
	{
		[DataMember] public virtual ClearMode? ValueClearMode { get { return ClearMode.Disabled; } set{} }
	}


	#endregion

}


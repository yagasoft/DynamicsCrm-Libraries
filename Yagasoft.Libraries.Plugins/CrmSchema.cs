//         Project / File: Yagasoft.Libraries.Plugins / CrmSchema.cs
// File generated by: CRM Code Generator - Ahmed Elsawalhy (Yagasoft.com)

using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Linq.Expressions;
using System.Xml.Linq;
using System.Text;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

[assembly: ProxyTypesAssemblyAttribute()]
namespace Yagasoft.Libraries.Plugins
{
	#region XrmServiceContext

	/// <summary>
	/// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public partial class XrmServiceContext : OrganizationServiceContext
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public XrmServiceContext(IOrganizationService service) : 
				base(service)
		{
		}

		/// <summary>
		/// Gets a binding to the set of all <see cref="CustomMessage"/> entities.
		/// </summary>
		public System.Linq.IQueryable<CustomMessage> CustomMessageSet
		{
			get
			{
				return this.CreateQuery<CustomMessage>();
			}
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class LinqEntityLimiter : ExpressionVisitor
	{
		protected override Expression VisitNew(NewExpression node)
		{
			var constructor = node.Constructor;
			var parameters = constructor.GetParameters();
			var param = node.Arguments.FirstOrDefault();
			var paramType = param?.Type;

			if (paramType != null && constructor.DeclaringType == paramType
				&& parameters.FirstOrDefault()?.ParameterType == typeof(object))
			{
				var valueGetter = paramType.GetMethod("GetAttributeValue", new[] { typeof(string) })?
					.MakeGenericMethod(typeof(object));

				if (valueGetter != null)
				{
					var limiterType = (node.Arguments.Skip(1).FirstOrDefault() as ConstantExpression)?.Value as Type;

					NewArrayExpression keysInit = null;
					NewArrayExpression valuesInit = null;

					if (limiterType == null && (parameters.Length == 1 || parameters.Skip(1).FirstOrDefault()?.ParameterType == typeof(Type)))
					{
						var attributes = paramType.GetProperties().Cast<MemberInfo>().Union(paramType.GetFields())
							.Where(e => Attribute.IsDefined(e, typeof(AttributeLogicalNameAttribute))).ToArray();

						keysInit = Expression.NewArrayInit(typeof(string), attributes
							.Select(e => Expression.Constant(e.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName)));
						valuesInit = Expression.NewArrayInit(typeof(object), attributes
							.Select(e => Expression.Call(param, valueGetter,
								Expression.Constant(e.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName))));
					}
					else if (limiterType != null && typeof(EntityContract).IsAssignableFrom(limiterType)
						&& parameters.Skip(1).FirstOrDefault()?.ParameterType == typeof(Type))
					{
						var attributes = limiterType.GetProperties().Cast<MemberInfo>().Union(limiterType.GetFields())
							.Where(e => Attribute.IsDefined(e, typeof(CrmFieldMappingAttribute))
								&& !Attribute.IsDefined(e, typeof(CrmRelationMappingAttribute))).ToArray();

						keysInit = Expression.NewArrayInit(typeof(string), attributes
							.Select(e => Expression.Constant(e.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName)));
						valuesInit = Expression.NewArrayInit(typeof(object), attributes
							.Select(e => Expression.Call(param, valueGetter,
								Expression.Constant(e.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName))));
					}

					if (keysInit != null)
					{
						var constructorInfo = paramType.GetConstructor(new[] { typeof(string[]), typeof(object[]) });

						if (constructorInfo != null)
						{
							return Expression.New(constructorInfo, keysInit, valuesInit);
						}
					}
				}
			}

			return base.VisitNew(node);
		}
	}

	/// <summary>
	/// Credits: https://github.com/davidfowl/QueryInterceptor
	/// </summary>
	public static class QueryableExtensions
    {
        public static IQueryable<T> InterceptWith<T>(this IQueryable<T> source, params ExpressionVisitor[] visitors)
        {
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            return new QueryTranslator<T>(source, visitors);
        }
    }

    internal class QueryTranslator<T> : IOrderedQueryable<T>
    {
	    public Type ElementType => typeof(T);
        public Expression Expression { get; }
        public IQueryProvider Provider => provider;

		private readonly QueryTranslatorProvider<T> provider;

        public QueryTranslator(IQueryable source, IEnumerable<ExpressionVisitor> visitors)
        {
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (visitors == null)
            {
                throw new ArgumentNullException(nameof(visitors));
            }

            Expression = Expression.Constant(this);
            provider = new QueryTranslatorProvider<T>(source, visitors);
        }

        public QueryTranslator(IQueryable source, Expression expression, IEnumerable<ExpressionVisitor> visitors)
        {
	        Expression = expression ?? throw new ArgumentNullException(nameof(expression));
            provider = new QueryTranslatorProvider<T>(source, visitors);
        }

        public IEnumerator<T> GetEnumerator()
        {
            return ((IEnumerable<T>)provider.ExecuteEnumerable(Expression)).GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return provider.ExecuteEnumerable(Expression).GetEnumerator();
        }
    }

    internal abstract class QueryTranslatorProvider : ExpressionVisitor
    {
	    internal IQueryable Source { get; }

		protected QueryTranslatorProvider(IQueryable source)
        {
			Source = source ?? throw new ArgumentNullException(nameof(source));
        }
	}

    internal class QueryTranslatorProvider<T> : QueryTranslatorProvider, IQueryProvider
    {
        private readonly IEnumerable<ExpressionVisitor> visitors;

        public QueryTranslatorProvider(IQueryable source, IEnumerable<ExpressionVisitor> visitors)
            : base(source)
        {
	        this.visitors = visitors ?? throw new ArgumentNullException(nameof(visitors));
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            return new QueryTranslator<TElement>(Source, expression, visitors);
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var elementType = expression.Type.GetGenericArguments().First();
            var result = (IQueryable)Activator.CreateInstance(typeof(QueryTranslator<>).MakeGenericType(elementType),
				Source, expression, visitors);

            return result;
        }

        public TResult Execute<TResult>(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var result = (this as IQueryProvider).Execute(expression);

            return (TResult)result;
        }

        public object Execute(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var translated = VisitAll(expression);

            return Source.Provider.Execute(translated);
        }

        internal IEnumerable ExecuteEnumerable(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var translated = VisitAll(expression);

            return Source.Provider.CreateQuery(translated);
        }

        private Expression VisitAll(Expression expression)
        {
            // Run all visitors in order
            var visitorsQ = new ExpressionVisitor[] { this }.Concat(visitors);
            return visitorsQ.Aggregate(expression, (expr, visitor) => visitor.Visit(expr));
        }

        protected override Expression VisitConstant(ConstantExpression node)
        {
            // Fix up the Expression tree to work with the underlying LINQ provider
	        if (!node.Type.IsGenericType || node.Type.GetGenericTypeDefinition() != typeof(QueryTranslator<>))
	        {
		        return base.VisitConstant(node);
	        }

	        var provider = ((IQueryable)node.Value).Provider as QueryTranslatorProvider;

	        return provider == null ? Source.Expression : provider.Source.Expression;
        }
    }

	#endregion

	#region Extensions

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class ValidationError
    {
        public Guid? RecordId;
        public string AttributeName;

        public ValidationType ErrorType;
        public IDictionary<int, string> ErrorMessage;

        public string StringValue;
        public int? StringMaxLength;

        public decimal? NumericValue;
        public decimal? NumericRangeMin;
        public decimal? NumericRangeMax;
    }

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class ValidationLocalisation
	{
		public ValidationType ErrorType;
		/// <summary>
		/// A dictionary of language code as key and message format as value
		/// </summary>
		public IDictionary<int, string> Localisation;
	}

	public static partial class CrmGeneratorExtensions
	{
		private class RelationProperty
		{
			internal PropertyInfo Property;
			internal RelationshipSchemaNameAttribute RelationAttribute;
		}

		private static IDictionary<string, IEnumerable<RelationProperty>> relationPropertyCache =
			new ConcurrentDictionary<string, IEnumerable<RelationProperty>>();

	    public static IEnumerable<TEntity> ProcessFetchXmlRelations<TEntity>(this IEnumerable<TEntity> entitiesParam, string fetchXml)
			where TEntity : GeneratedEntityBase
	    {
		    if (string.IsNullOrWhiteSpace(fetchXml))
		    {
				throw new ArgumentNullException(nameof(fetchXml));
		    }

		    if (entitiesParam == null)
		    {
				throw new ArgumentNullException(nameof(entitiesParam));
		    }

		    var entities = entitiesParam.ToArray();

		    if (!entities.Any())
		    {
			    return new TEntity[0];
		    }

		    foreach (var entity in entities)
			{
				var depth = 0;
				ProcessEntity(entity, entity, XElement.Parse(fetchXml).Element("entity"), ref depth);
			}

		    return entities.GroupBy(e => e.Id).Select(ConsolidateEntity).Where(e => e?.Id != Guid.Empty);
	    }

	    private static void ProcessEntity(Entity baseEntity, GeneratedEntityBase targetEntity, XElement xmlElement,
			ref int depth, string intersectingEntity = null)
	    {
		    foreach (var xLink in xmlElement.Elements("link-entity"))
		    {
			    depth++;

			    var linkedName = xLink.Attribute("name")?.Value;
			    var from = xLink.Attribute("from")?.Value;
			    var to = xLink.Attribute("to")?.Value;
			    var alias = GetLinkAlias(xLink, depth);

			    if (string.IsNullOrWhiteSpace(linkedName))
			    {
				    throw new ArgumentNullException(nameof(linkedName), "Linked entity name could not be found in FetchXML.");
			    }

			    if (string.IsNullOrWhiteSpace(from))
			    {
				    throw new ArgumentNullException(nameof(from), 
						$"'from' value could not be found in FetchXML for '{linkedName}'.");
			    }

			    if (string.IsNullOrWhiteSpace(to))
			    {
				    throw new ArgumentNullException(nameof(to), 
						$"'to' value could not be found in FetchXML for '{linkedName}'.");
			    }

			    if (string.IsNullOrWhiteSpace(alias))
			    {
				    throw new ArgumentNullException(nameof(alias), 
						$"'alias' value could not be found in FetchXML for '{linkedName}'.");
			    }

			    var relationParameters = targetEntity.RelationProperties
				    .Select(p => p.Value)
				    .Where(p => p.Length >= 5)
				    .FirstOrDefault(p => p[1].ToString() == linkedName && p[3].ToString() == from && p[4].ToString() == to);
			    var isNn = false;

			    if (relationParameters == null)
			    {
					// intersecting
				    relationParameters = targetEntity.RelationProperties
					    .Select(p => p.Value)
					    .Where(p => p.Length >= 9)
					    .FirstOrDefault(p => linkedName == p[2].ToString());
					isNn = true;

				    if (relationParameters == null)
				    {
					    relationParameters = targetEntity.RelationProperties
						    .Select(p => p.Value)
						    .Where(p => p.Length >= 3)
						    .FirstOrDefault(p => p[2].ToString() == intersectingEntity);
						isNn = false;

					    if (relationParameters == null)
					    {
						    continue;
					    }
				    }
			    }

			    var role = (relationParameters[8] as Type)?.IsArray == true ? EntityRole.Referenced : EntityRole.Referencing;
			    var schemaName = relationParameters[7].ToString();

			    var relationProperties = GetRelationInfoCache(targetEntity);

			    var relationProperty = relationProperties.FirstOrDefault(pa =>
				    pa.RelationAttribute.SchemaName == schemaName
					    && (pa.RelationAttribute.PrimaryEntityRole == role || pa.RelationAttribute.PrimaryEntityRole == null))?
				    .Property;
			    var propertyType = relationProperty?.PropertyType;

			    if (propertyType == null)
			    {
				    continue;
			    }

			    var relatedEntity = PrepareRelation(targetEntity, relationProperty);

			    if (relatedEntity == null)
			    {
				    continue;
			    }

			    foreach (var xAttribute in xLink.Elements("attribute"))
			    {
				    ProcessXAttribute(baseEntity, relatedEntity, alias, xAttribute);
			    }

			    if (xLink.Elements("all-attributes").Any())
			    {
				    ProcessAllAttributes(baseEntity, relatedEntity, alias);
			    }

				// go over the related entity as well for its own relations
			    ProcessEntity(baseEntity, isNn ? targetEntity : relatedEntity, xLink, ref depth, isNn ? linkedName : null);
		    }
	    }

		private static IEnumerable<RelationProperty> GetRelationInfoCache(GeneratedEntityBase targetEntity)
		{
			if (!relationPropertyCache.TryGetValue(targetEntity.LogicalName, out var relationProperties))
			{
				relationProperties = relationPropertyCache[targetEntity.LogicalName] =
					targetEntity.GetType().GetProperties()
						.Where(p => Attribute.IsDefined(p, typeof(RelationshipSchemaNameAttribute)))
						.Select(p =>
							new RelationProperty
							{
								Property = p,
								RelationAttribute = p.GetCustomAttribute<RelationshipSchemaNameAttribute>()
							});
			}

			return relationProperties;
		}

		private static string GetLinkAlias(XElement xLink, int depth)
	    {
		    var linkedName = xLink.Attribute("name")?.Value;

		    if (string.IsNullOrWhiteSpace(linkedName))
		    {
			    return null;
		    }

		    var alias = xLink.Attribute("alias")?.Value;

		    if (string.IsNullOrWhiteSpace(alias))
		    {
			    alias = $"{linkedName}{depth}";
		    }

		    return alias;
	    }

	    private static GeneratedEntityBase PrepareRelation(GeneratedEntityBase targetEntity, PropertyInfo relationProperty)
	    {
		    var propertyType = relationProperty?.PropertyType;

		    if (propertyType == null)
		    {
			    return null;
		    }

		    var isArray = typeof(IEnumerable).IsAssignableFrom(propertyType);
		    var relatedEntityType = propertyType;

		    if (isArray)
		    {
			    relatedEntityType = propertyType.GetElementType();
		    }

		    if (relatedEntityType == null)
		    {
			    return null;
		    }

		    var relatedEntity = Activator.CreateInstance(relatedEntityType) as GeneratedEntityBase;

		    if (relatedEntity == null)
		    {
			    return null;
		    }

		    object relatedValue = relatedEntity;
		    var currentValue = relationProperty.GetValue(targetEntity);

		    if (isArray)
		    {
			    var relatedList = (object[])(currentValue ?? Activator.CreateInstance(propertyType, 1));
			    relatedList[0] = relatedEntity;
			    relatedValue = relatedList;
		    }
		    else if (currentValue != null)
		    {
			    // already parsed N-1
			    return null;
		    }

		    relationProperty.SetValue(targetEntity, relatedValue);

		    return relatedEntity;
	    }

		private static void ProcessXAttribute(Entity baseEntity, GeneratedEntityBase relatedEntity, string relatedAlias,
			XElement xAttribute)
		{
			var	attributeName = xAttribute.Attribute("name")?.Value;
			var attributeAlias = xAttribute.Attribute("alias")?.Value;
			var isAliasedSame = string.IsNullOrWhiteSpace(relatedAlias) || attributeName == attributeAlias;

			if (!string.IsNullOrWhiteSpace(attributeAlias))
			{
				attributeName = attributeAlias;
			}

			ProcessAttribute(baseEntity, relatedEntity, relatedAlias, attributeName, isAliasedSame);
		}

		private static void ProcessAttribute(Entity baseEntity, GeneratedEntityBase relatedEntity, string relatedAlias,
			string attributeName, bool isAliasedSame)
	    {
		    var attribute = baseEntity.Attributes
			    .FirstOrDefault(a => !string.IsNullOrWhiteSpace(relatedAlias) && a.Key == $"{relatedAlias}.{attributeName}").Value
			    ?? baseEntity.Attributes
				    .FirstOrDefault(a => isAliasedSame && a.Key == attributeName).Value;

		    if (attribute is AliasedValue)
		    {
			    var aliasedValue = attribute as AliasedValue;
			    relatedEntity[aliasedValue.AttributeLogicalName] = aliasedValue.Value;
			    return;
		    }

		    if (attribute != null)
		    {
			    relatedEntity[attributeName] = attribute;
		    }
	    }

		private static void ProcessAllAttributes(Entity baseEntity, GeneratedEntityBase relatedEntity, string relatedAlias)
		{
			var attributes = baseEntity.Attributes
				.Where(a =>
					string.IsNullOrWhiteSpace(relatedAlias)
						? !a.Key.Contains($".")
						: a.Key.StartsWith($"{relatedAlias}."));

			foreach (var pair in attributes)
			{
				var attribute = pair.Value;

				AliasedValue aliasedValue;

				if (attribute is AliasedValue)
				{
					aliasedValue = attribute as AliasedValue;
					relatedEntity[aliasedValue.AttributeLogicalName] = aliasedValue.Value;
					continue;
				}

				if (attribute != null)
				{
					relatedEntity[pair.Key] = attribute;
				}
			}
	    }

	    private static TEntity ConsolidateEntity<TEntity>(IGrouping<Guid, TEntity> grouping)
		    where TEntity : GeneratedEntityBase
	    {
		    if (!grouping.Any())
		    {
			    return null;
		    }

		    var baseEntity = grouping.First();

		    var relationProperties = GetRelationInfoCache(baseEntity);
		    var baseRelationProperties = relationProperties
			    .Where(x => x.Property.PropertyType.IsArray
				    && (x.RelationAttribute.PrimaryEntityRole == EntityRole.Referenced
					    || x.RelationAttribute.PrimaryEntityRole == null)).ToArray();

		    foreach (var entity in grouping.Skip(1))
		    {
			    foreach (var relationProperty in baseRelationProperties)
			    {
				    var currentBaseRelationInfo = baseRelationProperties
					    .FirstOrDefault(x => x.RelationAttribute.SchemaName == relationProperty.RelationAttribute.SchemaName)?
						.Property;
				    var currentRelation = (GeneratedEntityBase[])relationProperty.Property.GetValue(entity);

				    if (currentBaseRelationInfo == null || currentRelation == null)
				    {
					    relationProperty.Property.SetValue(baseEntity, null);
					    continue;
				    }

				    var currentBaseRelation = ((GeneratedEntityBase[])currentBaseRelationInfo.GetValue(baseEntity))?
						.Where(e => e?.Id != Guid.Empty).ToArray();

					if (currentBaseRelation == null || !currentBaseRelation.Any())
					{
						currentBaseRelationInfo.SetValue(baseEntity, null);
						continue;
					}

					var baseLength = currentBaseRelation?.Length ?? 0;

				    var newBaseRelation = (GeneratedEntityBase[])Activator.CreateInstance(currentRelation.GetType(), baseLength + 1);

				    if (currentBaseRelation?.Length > 0)
				    {
					    Array.Copy(currentBaseRelation, newBaseRelation, baseLength);
				    }

				    Array.Copy(currentRelation.Where(e => e?.Id != Guid.Empty).ToArray(), 0, newBaseRelation, baseLength, 1);
				    currentBaseRelationInfo.SetValue(baseEntity, newBaseRelation);
			    }
		    }

		    foreach (var baseRelationPropertyInfo in baseRelationProperties)
		    {
			    var baseRelationProperty = baseRelationPropertyInfo.Property;

				var currentRelation = (GeneratedEntityBase[])baseRelationProperty.GetValue(baseEntity);
				var currentRelationFiltered = currentRelation?.Where(e => e?.Id != Guid.Empty).ToArray();

				if (currentRelationFiltered == null || !currentRelationFiltered.Any())
			    {
					baseRelationProperty.SetValue(baseEntity, null);
				    continue;
			    }

			    var related = currentRelation.GroupBy(e => e.Id).Select(ConsolidateEntity)
					.Where(e => e?.Id != Guid.Empty).ToArray();

				if (related == null || !related.Any())
				{
					baseRelationProperty.SetValue(baseEntity, null);
					continue;
				}

				var newRelation = (GeneratedEntityBase[])Activator.CreateInstance(currentRelation.GetType(), related.Length);
			    Array.Copy(related, newRelation, related.Length);
				baseRelationProperty.SetValue(baseEntity, newRelation);
		    }

		    return baseEntity;
	    }
		
		/// <summary>
		/// Converts an enum constant to an OptionSetValue object..
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.IndustryCode.Accounting'</param>
		/// <returns>The OptionSetValue object.</returns>
		public static OptionSetValue ToOptionSetValue(this Enum enumMember)
		{
			return new OptionSetValue(int.Parse(enumMember.ToString("d")));
		}

		/// <summary>
		///     Calling this method on a LINQ will result in limiting attributes retrieved from CRM on any early-bound entity in
		///     the query.<br />
		///     The properties defined in the entity's class will be the ones retrieved from CRM by default; all other attributes
		///     in CRM will be ignored.<br />
		///     The entity <b>must</b> be passed to a constructor of the same type.<br />
		///     Example:
		///     <code>
		/// (from account in new XrmServiceContext(service).AccountSet
		/// select new Account(account)).ToList()
		/// </code>
		/// </summary>
		public static IQueryable<TEntity> LimitAttributes<TEntity>(this IQueryable<TEntity> q) where TEntity : Entity
		{
			return q.InterceptWith(new LinqEntityLimiter());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run. Default is all.</param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorsMessage(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "Range", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
				&& validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrorMessages = GetValidationErrorMessages(entityRecord, validationLocalisation);

			if (validationErrorMessages.Any())
			{
				return validationErrorMessages.Aggregate(
					(message1, message2) => message1 + "\r\n-----------------------\r\n" + message2);
			}

			return null;
		}

		private static readonly ValidationLocalisation[] validationLocationsDefaults =
		{
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Required,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, "Value cannot be null."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Range,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute value must be between ""{0}"" and ""{1}"", inclusive. Actual value was ""{2}""."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.MaxLength,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute length must be less than ""{0}"". Actual attribute value was ""{1}""."}
				               }
			}
		};

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorMessages(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "Range", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
			    && validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrors = GetValidationErrors(entityRecord, validationLocalisation);

			if (validationErrors.Any())
			{
				var messages = validationErrors.Select(error => error.ErrorMessage.Values.First()).ToList();
				var id = ((dynamic)entityRecord).Id;
				messages.Insert(0, string.Format("Record of type \"{0}\"" + (id != null ? " and ID \"{1}\"" : "")
													+ " has invalid values.", entityRecord.GetType().Name, id));
				return messages;
			}

			return null;
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrors(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		///  <summary>
		///      Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///      Validation checks: required, numeric value range, and string length.<br />
		///  </summary>
		///  <param name="validationLocalisation">
		///      [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///      For validation type "Range", the message format takes three params for min, max, and actual value respectively;
		///          e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///      For validation type "MaxLength", the message format takes two params;
		/// 		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///      Default is a check on all validation types.
		///  </param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			var id = ((dynamic) entityRecord).Id;
			var fields = entityRecord.GetType().GetProperties();
			var exceptions = new List<ValidationError>();

			validationLocalisation = validationLocalisation ?? validationLocationsDefaults;


			return exceptions;
		}

		public static TEntity ConvertTo<TEntity>(this GeneratedEntityBase crmRecord) where TEntity : EntityContract
		{
			// create entity object
			var record = Activator.CreateInstance<TEntity>();

			var entityType = typeof(TEntity);
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;
			var properties = entityType.GetProperties().ToArray();

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("CRM entity '{0}' doesn't map to entity '{1}'.",
					crmRecord.GetType().Name, entityType.Name));
			}

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in properties
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				SetValueInRecord(record, field, crmRecord, mapping);
			}

			var relations = properties
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))).ToArray();

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in relations)
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				SetRelationInRecord(record, relation, crmRecord, mapping);
			}

			var flattableRelations = relations
				.Select(r =>
					new
					{
						r,
						p = properties
							.Where(p => Attribute.IsDefined(p, typeof(CrmFieldMappingAttribute))
								   && Attribute.IsDefined(p, typeof(CrmRelationMappingAttribute)))
							.Where(
								p =>
								{
									var rAttr = r.GetCustomAttribute<CrmRelationMappingAttribute>();
									var pAttr = p.GetCustomAttribute<CrmRelationMappingAttribute>();
									return rAttr.SchemaName == pAttr.SchemaName
										&& rAttr.Role == pAttr.Role;
								})
					})
				.Where(r => r.p.Any());

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var r in flattableRelations)
			{
				SetRelationInRecord(record, r.r, r.p);
			}

			return record;
		}

		private static void SetValueInRecord<TEntity>(TEntity entity, PropertyInfo field, GeneratedEntityBase crmRecord,
			CrmFieldMappingAttribute mapping)
			where TEntity : EntityContract
		{
			// if key not found, then the CRM record doesn't have that value set
			var crmValue = crmRecord.GetAttributeValue<object>(mapping.LogicalName);

			if (crmValue == null)
			{
				return;
			}

			var crmField = crmRecord.GetType().GetProperties()
				.FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(AttributeLogicalNameAttribute))
					&& propQ.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName == mapping.LogicalName);

			if (crmField == null)
			{
				return;
			}

			var value = crmField.GetValue(crmRecord);

			if (value == null)
			{
				return;
			}

			// convert types
			if (value is Enum)
			{
				var underlyingType = Nullable.GetUnderlyingType(field.PropertyType);

				if (underlyingType == null)
				{
					return;
				}

				// can't set enum value with int using reflection!
				field.SetValue(entity, Enum.ToObject(underlyingType, Convert.ToInt32(value)));

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else if (crmValue is EntityReference)
			{
				var entityRef = (EntityReference) crmValue;

				if (field.PropertyType == typeof(Guid?))
				{
					field.SetValue(entity, entityRef.Id);
				}
				else if (field.PropertyType == typeof(LookupValue))
				{
					field.SetValue(entity, new LookupValue(entityRef.LogicalName, entityRef.Id));
				}

				var nameField = typeof(TEntity).GetProperties().FirstOrDefault(fieldQ => fieldQ.Name == field.Name + "Name");

				if (nameField != null && entityRef.Name != null)
				{
					nameField.SetValue(entity, entityRef.Name);
				}

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(LabelAttribute))
                        && propQ.GetCustomAttribute<LabelAttribute>().FieldLogicalName == labelsProperty.GetCustomAttribute<LabelAttribute>().FieldLogicalName);

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else
			{
				field.SetValue(entity, value);
			}
		}

		private static void SetRelationInRecord<TEntity>(TEntity record, PropertyInfo field, Entity crmRecord,
			CrmRelationMappingAttribute mapping)
			where TEntity : EntityContract
		{
			var crmRelation = crmRecord.GetType().GetProperties()
				.FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(RelationshipSchemaNameAttribute))
					&& propQ.GetCustomAttribute<RelationshipSchemaNameAttribute>().SchemaName == mapping.SchemaName
					&& propQ.GetCustomAttribute<RelationshipSchemaNameAttribute>().PrimaryEntityRole.ToString() == mapping.Role.ToString());

			if (crmRelation == null)
			{
				return;
			}

			var fieldType = field.PropertyType;

			object convertedValue = null;

			// x-N relation
			if (typeof(Array).IsAssignableFrom(fieldType))
			{
				var value = crmRelation.GetValue(crmRecord) as Array;

				if (value == null || value.Length <= 0)
				{
					return;
				}

				// get the contract type for the relation
				var elementType = fieldType.GetElementType();

				if (elementType == null)
				{
					return;
				}

				// create an array for the related entities of the appropriate type
				var relatedRecords = Array.CreateInstance(elementType, value.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType?
					.GetMethod("ConvertTo")?.MakeGenericMethod(elementType);

				if (method == null)
				{
					return;
				}

				// convert all entities to contract entities
				var objectRelatedRecords =
					(from object relatedRecord in value
					 select method.Invoke(relatedRecord, new[] { relatedRecord })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectRelatedRecords, relatedRecords, relatedRecords.Length);
				convertedValue = relatedRecords;
			}
			else if (typeof(EntityContract).IsAssignableFrom(fieldType))
			{
				var value = crmRelation.GetValue(crmRecord) as GeneratedEntityBase;

				if (value == null)
				{
					return;
				}

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType?
					.GetMethod("ConvertTo")?.MakeGenericMethod(fieldType);

				if (method == null)
				{
					return;
				}

				convertedValue = method.Invoke(value, new object[] { value });
			}

			// set the related entities value in the entity
			field.SetValue(record, convertedValue);
		}

		private static void SetRelationInRecord(object record, PropertyInfo relationInfo, IEnumerable<PropertyInfo> flatPropertiesP)
		{
			var relation = relationInfo.GetValue(record);

			if (relation == null)
			{
				return;
			}

			var flatProperties = flatPropertiesP.ToArray();

			var relationProperties = relationInfo.PropertyType.GetProperties()
				.Where(p => Attribute.IsDefined(p, typeof(CrmFieldMappingAttribute))
					&& !Attribute.IsDefined(p, typeof(CrmRelationMappingAttribute)));

			foreach (var relationProperty in relationProperties)
			{
				var flatProperty = flatProperties
					.FirstOrDefault(f => f.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName
						== relationProperty.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName);

				if (flatProperty == null)
				{
					continue;
				}

				flatProperty.SetValue(record, relationProperty.GetValue(relation));
			}

			relationInfo.SetValue(record, null);
		}

		/// <summary>
		/// Returns an array of logical names whose property is marked for WCF contract.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetDataMemberAttributes(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Returns an array of logical names of the properties.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetAttributeNames(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)) && !Attribute.IsDefined(fieldQ, typeof(RelationshipSchemaNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Loads the values of data member properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		public static void LoadDataMemberAttributes(this Entity entity, IOrganizationService service)
		{
			LoadAttributeValues(entity, service, entity.GetDataMemberAttributes());
		}

		/// <summary>
		/// Loads the values of all properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		/// <param name="attributes"></param>
		public static void LoadAttributeValues(this Entity entity, IOrganizationService service, params string[] attributes)
		{
			try
			{
				entity.Id = entity.Id;
			}
			catch
			{
				throw new Exception("Entity is ready only. Set 'MergeOption' to 'NoTracking' in the context used for fetching this entity.");
			}

			var isLoadAll = attributes == null || attributes.Length <= 0;

			if (isLoadAll)
			{
				entity.Attributes.Clear();
			}

			foreach (var attribute in service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(isLoadAll ? entity.GetAttributeNames() : attributes)).Attributes)
			{
				entity[attribute.Key] = attribute.Value;
			}
		}
	}

	#endregion

	#region Helpers

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntityBase : Entity	{
		protected GeneratedEntityBase()
		{}

		protected GeneratedEntityBase(string logicalName) : base(logicalName)
		{}

		/// <summary>
		///     Initialises this entity with the given keys and values.
		/// </summary>
		protected GeneratedEntityBase(string[] keys, object[] values, string logicalName) : this(logicalName)
		{
			for (var i = 0; i < keys.Length; i++)
			{
				var key = keys[i];
				var value = values[i];

				if (value == null)
				{
					continue;
				}

				Attributes[key] = value;
			}
		}

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type.<br />
		/// <b>OR</b> ...<br />
		///     Constructor that Limits attributes retrieved from CRM on any early-bound entity in a LINQ query.<br />
		///     The properties and fields defined in this class will be the ones retrieved from CRM by default; all other attributes
		///     in CRM will be ignored.<br />
		///     The selected early-bound record of this class's type in the query <b>must</b> be passed to this constructor.<br />
		///     Example:
		///     <code>
		/// (from account in new XrmServiceContext(service).AccountSet
		/// select new Account(account)).ToList()
		/// </code>
		/// </summary>
		protected GeneratedEntityBase(object obj, string logicalName) : base(logicalName)
		{ }

		/// <summary>
		///     Limits attributes retrieved from CRM on any early-bound entity in a LINQ.<br />
		///     The properties and fields defined in the 'limitingType' class will be the ones retrieved from CRM by default;
		///     all other attributes in CRM will be ignored.<br />
		///     The selected early-bound record of this class's type in the query <b>must</b> be passed to this constructor.<br />
		///     Example:
		///     <code>
		/// (from account in new XrmServiceContext(service).AccountSet
		/// select new Account(account, typeof(AccountModel))).ToList()
		/// </code>
		/// </summary>
		protected GeneratedEntityBase(object obj, Type limitingType, string logicalName) : base(logicalName)
		{ }

		[DataMember]
		private List<string> NullValuedAttributes { get; set; }
		internal IList<QueryAction> DeferredQueriesList = new List<QueryAction>();
		protected IDictionary<string, object[]> relationProperties;
		public virtual IDictionary<string, object[]> RelationProperties { get { return new Dictionary<string, object[]>(); } }

		#region Serialisation events

		[OnDeserialized]
		private void DeserializedInitializer(StreamingContext ctx)
		{
			LogicalName = (string)GetType().GetField("EntityLogicalName").GetRawConstantValue();
			Attributes.Where(attribute => attribute.Value == null).ToList().ForEach(attribute => Attributes.Remove(attribute.Key));
			if (NullValuedAttributes != null && NullValuedAttributes.Count > 0)
			{
				NullValuedAttributes.ForEach(attribute =>
				{
					var property = GetType().GetProperty(attribute);
					if (property == null)
					{
						throw new Exception("Couldn't find the property '" + attribute + "' in entity.");
					}
					property.SetValue(this, null);
				});
			}
		}

		#endregion

		public XrmServiceContext ServiceContext { get; set; }

		public void LoadLookupLabels(IOrganizationService service, bool isDeferred = false)
		{
			var properties = from propQ in this.GetType().GetProperties()
			                 let propIdQ = this.GetType().GetProperty(propQ.Name.Replace("Labels", ""))
			                 where Attribute.IsDefined(propQ, typeof(LabelAttribute))
			                       && (Guid?) propIdQ.GetValue(this) != null
			                 select new
			                        {
				                        property = propQ,
				                        id = propIdQ.GetValue(this),
				                        attribute = propQ.GetCustomAttribute<LabelAttribute>()
			                        };

			foreach (var property in properties)
			{
				var fields = property.attribute.LabelFieldNames.Split(',');

				var query = new QueryExpression(property.attribute.LogicalName);
				query.Criteria.AddCondition(property.attribute.IdFieldName, ConditionOperator.Equal, property.id);
				query.ColumnSet = new ColumnSet(fields.Select(field => field.Substring(5)).ToArray());

				var queryAction =
					new QueryAction(query)
					{
						Action =
							result =>
							{
								var response = result as RetrieveMultipleResponse;
								if (response == null) return;

								var entityQ = response.EntityCollection.Entities.FirstOrDefault();
								if (entityQ == null) return;

								var englishLabel = (string) entityQ.Attributes.FirstOrDefault(
									attribute => ("1033_" + attribute.Key) == fields.FirstOrDefault(field => field.Contains("1033_"))).Value;
								var dictionary = new Dictionary<int, string>();
								dictionary[1033] = englishLabel;
								property.property.SetValue(this, dictionary);
							}
					};

				if (isDeferred)
				{
					this.DeferredQueriesList.Add(queryAction);
				}
				else
				{
					queryAction.Action.Invoke(service.Execute(new RetrieveMultipleRequest{Query = query}));
				}
			}
		}

		#region Relationship methods

		protected override IEnumerable<TEntity> GetRelatedEntities<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
		    var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && enumerable == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			return enumerable;
		}

		protected override TEntity GetRelatedEntity<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
			var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && result == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);
			
			return result;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntity<TRelationName> : GeneratedEntityBase where TRelationName : RelationNameBase
	{
		protected GeneratedEntity(string logicalName) : base(logicalName)
		{ }

		/// <inheritdoc/>
		protected GeneratedEntity(string[] keys, object[] values, string logicalName) : base(keys, values, logicalName)
		{ }

		/// <inheritdoc/>
		protected GeneratedEntity(object obj, Type limitingType, string logicalName) : base(obj, limitingType, logicalName)
		{ }

		/// <inheritdoc/>
		protected GeneratedEntity(object obj, string logicalName) : base(obj, logicalName)
		{ }

		#region Relationship methods

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, params string[] attributes)
		{
			return LoadRelation(relationName, service, false, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, null, attributes);
		}

		/// <summary>
		/// Fetch the next page of records related to this entity on this relationship using the previous paging info object returned.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, pagingInfo.RecordCountLimit, pagingInfo.NextPage, pagingInfo.Cookie, pagingInfo.Filter, pagingInfo, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, filter, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
									"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			if (!RelationProperties.ContainsKey(relationName.Name)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationPagingInfo = pagingInfo ?? new RelationPagingInfo
				{
					RecordCountLimit = recordCountLimit,
					Filter = filter,
					Cookie = cookie,
					NextPage = page
				};
			var relationParams = RelationProperties[relationName.Name];
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, cookie, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  var newValue = relatedRecords.Length <= 0 ? null : (((Type) relationParams[8]).GetElementType() == null ? relatedRecords.GetValue(0) : relatedRecords);
								  GetType().GetProperty((string) relationParams[0]).SetValue(this, newValue);
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(GeneratorHelpers.LoadRelation(service, queryActionObject.Query, recordCountLimit, page, cookie, relationPagingInfo));
			return relationPagingInfo;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class RelationPagingInfo
	{
		public string Cookie;
		public int NextPage = 1;
		public int RecordCountLimit = -1;
		public FilterExpression Filter;
		public bool IsMoreRecords = true;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class RelationNameBase
	{
		public string Name;

		public RelationNameBase(string name)
		{
			Name = name;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	internal class QueryAction
	{
		public QueryExpression Query { get; set; }
		public Action<object> Action { get; set; }

		public QueryAction(QueryExpression query, Action<object> action = null)
		{
			Query = query;
			Action = action;
		}
	}

	public enum ValidationType
	{
		Required,
		Range,
		MaxLength
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class LookupKeysBase
	{
		public string Name;

		protected LookupKeysBase(string name)
		{
			Name = name;
		}
	}

	public interface ILookupKeys<in TKey> where TKey : LookupKeysBase
	{
		void AddKey(TKey key, object value);
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public class CrmActionBase<TInputs, TOutputs>
		where TInputs : CrmActionBase<TInputs, TOutputs>.InputsBase, new()
		where TOutputs : CrmActionBase<TInputs, TOutputs>.OutputsBase, new()
	{
		public IOrganizationService Service;
		public OrganizationRequest Request;
		public OrganizationResponse Response;
		public TInputs InputParams;
		public TOutputs OutputFields;
		
		public CrmActionBase(string actionName)
		{
			Request = new OrganizationRequest(actionName);
			InputParams = new TInputs() { Request = Request };
		}
		
		public CrmActionBase(IOrganizationService service, string actionName) : this(actionName)
		{
			Service = service;
		}

		public TOutputs Execute(IOrganizationService service = null)
		{
			if (service != null)
			{
				Service = service;
			}

			Response = Service.Execute(Request);

			return OutputFields = new TOutputs() { Response = Response };
		}
				
		public abstract class InputsBase
		{
			public OrganizationRequest Request;

			public InputsBase()
			{ }

			public InputsBase(OrganizationRequest request)
			{
				Request = request;
			}
		}
		
		public abstract class OutputsBase
		{
			public OrganizationResponse Response;

			public OutputsBase()
			{ }

			public OutputsBase(OrganizationResponse response)
			{
				Response = response;
			}
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class GeneratorHelpers
	{
		#region Enums

		/// <summary>
		/// Get the value that corresponds to the label from the option-set,
		/// using the type of the class enclosing both, label type, and the language code given.
		/// </summary>
		/// <param name="labelType">The type of the class containing the labels; e.g.: 'typeof(Account.Enums.Labels.IndustryCode)'</param>
		/// <param name="label">The label to search for, corresponding to the value</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(Type labelType, string label, int languageCode = 1033)
		{
			var labelsType = labelType.DeclaringType;

			if (labelsType == null)
			{
				return -1;
			}

			var enumsType = labelsType.DeclaringType;

			if (enumsType == null)
			{
				return -1;
			}

			// get the fields with the same label from the label class
			var fields = labelType.GetFields()
				.Where(fieldQ => fieldQ.Name.Contains(languageCode.ToString())
					&& (string)fieldQ.GetValue(labelType) == label);

			if (!fields.Any())
			{
				return -1;
			}

			var field = fields.First();

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				return -1;
			}

			var enumType = entityType.GetNestedType(labelType.Name + "Enum");

			if (enumType == null)
			{
				return -1;
			}

			// get the enum constant corresponding to the field name
			var enumConstant = Enum.Parse(enumType, field.Name.Replace("_" + languageCode, ""));

			return (int)enumConstant;
		}

		/// <summary>
		/// Gets the value corresponding to the option-set's label using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="label">The label from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(string logicalName, string label, Type enumsType, int languageCode = 1033)
		{
			var labelType = GetLabelType(enumsType, logicalName);

			return GetValue(labelType, label, languageCode);
		}

		private static Type GetEnumType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				throw new Exception("Can't find the entity type from the enum type.");
			}

			return field == null ? null : entityType.GetNestedType(field.Name + "Enum");
		}

		#endregion

		#region Labels

		/// <summary>
		/// Gets the label corresponding to the option-set's value using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="constant">The value from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns></returns>
		public static string GetLabel(string logicalName, int constant, Type enumsType, int languageCode = 1033)
		{
			var enumType = GetEnumType(enumsType, logicalName);

			if (enumType == null)
			{
				return null;
			}

			var enumName = enumType.Name;
			var constantName = enumType.GetEnumName(constant);
			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return null;
			}

			var labelType = labelsType.GetNestedType(enumName.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return null;
			}

			var field = labelType.GetField(constantName + "_" + languageCode);

			return field == null ? null : field.GetValue(labelType).ToString();
		}

		private static Type GetLabelType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);
			return enumsType.GetNestedType("Labels").GetNestedType(field.Name);
		}

		#endregion

		private static FieldInfo GetLogicalNameField(Type enumsType, string logicalName)
		{
			var namesType = enumsType.GetNestedType("Names");
			return namesType.GetFields().FirstOrDefault(fieldQ => (string)fieldQ.GetValue(namesType) == logicalName);
		}

		internal static QueryExpression GetLoadRelationQuery(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1, string cookie = null,
			FilterExpression filter = null, params string[] attributes)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			// create the query taking into account paging
			var query = new QueryExpression(fromEntityName);
			query.LinkEntities.Add(new LinkEntity(fromEntityName, toEntityName, fromFieldName, toFieldName, JoinOperator.Inner));
			query.LinkEntities[0].EntityAlias = "linkedEntityAlias";
			query.Criteria.AddCondition("linkedEntityAlias", intersectIdFieldName, ConditionOperator.Equal, entity[idFieldName]);

			if (filter != null)
			{
				query.Criteria.AddFilter(filter);
			}

			if (attributes.Length == 1 && attributes[0] == "*")
			{
				query.ColumnSet = new ColumnSet(true);
			}
			else if (attributes.Length > 0)
			{
				query.ColumnSet = new ColumnSet(attributes);
			}
			else
			{
				query.ColumnSet = new ColumnSet(false);
			}

			query.PageInfo = new PagingInfo
			{
				PageNumber = page <= 0 ? 1 : page,
				Count = limit,
				PagingCookie = cookie
			};

			return query;
		}

		internal static List<Entity> LoadRelation(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null, string cookie = null, RelationPagingInfo relationPagingInfo = null, params string[] attributes)
		{
			return LoadRelation(service, GetLoadRelationQuery(entity, service, fromEntityName, toEntityName,
				fromFieldName, toFieldName, idFieldName, intersectIdFieldName, limit, page, cookie,
				filter, attributes), limit, page, cookie, relationPagingInfo);
		}

		public static List<Entity> LoadRelation(IOrganizationService service, QueryExpression query,
			int limit = -1, int page = -1, string cookie = null, RelationPagingInfo relationPagingInfo = null)
		{
			limit = limit <= 0 ? int.MaxValue : limit;
			query.PageInfo = query.PageInfo ??
				new PagingInfo
				{
					PageNumber = page <= 0 ? 1 : page,
					Count = limit
				};
			query.PageInfo.PagingCookie = cookie ?? relationPagingInfo.Cookie ?? query.PageInfo.PagingCookie;

			EntityCollection records;
			var entities = new List<Entity>();

			// get all records
			do
			{
				// fetch the records
				records = service.RetrieveMultiple(query);

				// next time get the next bundle of records
				query.PageInfo.PagingCookie = records.PagingCookie;
				query.PageInfo.PageNumber++;

				// add to existing list
				entities.AddRange(records.Entities);
			} while (records.MoreRecords && entities.Count < limit && page <= 0);

			if (relationPagingInfo != null)
			{
				relationPagingInfo.Cookie = query.PageInfo.PagingCookie;
				relationPagingInfo.NextPage = query.PageInfo.PageNumber;
				relationPagingInfo.IsMoreRecords = records.MoreRecords;
			}

			return entities.ToList();
		}

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		public static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			params GeneratedEntityBase[] entities)
		{
            return ProcessDeferredQueries(service, 100, entities);
        }

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="bulkSize">The number of requests from the queue to execute in each iteration.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		internal static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			int bulkSize, params GeneratedEntityBase[] entities)
		{
			var errorList = new Dictionary<GeneratedEntityBase, IList<string>>();

			// exit if no entities to process
			if (!entities.Any()) return errorList;
            
            bulkSize = Math.Min(1000, bulkSize);

			// filter entities to only the ones with a queue
			entities = entities.Where(entity => entity.DeferredQueriesList.Any()).ToArray();

			// queue to assign errors to proper entity and to find the original query and invoke the action
			var queryActionQueue = new Queue<KeyValuePair<GeneratedEntityBase, QueryAction>>();

			// create a queue to support paging in bulk execution
			var requestsQueue = new Queue<OrganizationRequest>();

			// go over the entities and fill the queues
			foreach (var entity in entities)
			{
				foreach (var queryAction in entity.DeferredQueriesList)
				{
					queryActionQueue.Enqueue(new KeyValuePair<GeneratedEntityBase, QueryAction>(entity, queryAction));
					requestsQueue.Enqueue(new RetrieveMultipleRequest {Query = queryAction.Query});
				}
			}

			var bulkQuery = new ExecuteMultipleRequest
			{
				Settings = new ExecuteMultipleSettings
				{
					ContinueOnError = true,
					ReturnResponses = true
				},
				Requests = new OrganizationRequestCollection()
			};

			while (requestsQueue.Any())
			{
				bulkQuery.Requests.Clear();

				// page execution
				do
				{
					bulkQuery.Requests.Add(requestsQueue.Dequeue());
				} while (bulkQuery.Requests.Count % bulkSize != 0 && requestsQueue.Any());

				var result = (ExecuteMultipleResponse) service.Execute(bulkQuery);

				foreach (var response in result.Responses)
				{
					var queryAction = queryActionQueue.Dequeue();
					var entity = queryAction.Key;

					// parse fault
					if (response.Fault != null)
					{
						if (!errorList.ContainsKey(entity))
						{
							errorList.Add(entity, new List<string>());
						}

						errorList[entity].Add(string.Format("Error code: {0}.\nError message: {1}.",
							response.Fault.ErrorCode, response.Fault.Message)
													 + (!string.IsNullOrEmpty(response.Fault.TraceText)
															? "\nError trace: " + response.Fault.TraceText
															: ""));

						continue;
					}

					queryAction.Value.Action.Invoke(response.Response);
				}
			}

			return errorList;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class EntityComparer : IEqualityComparer<Entity>
    {
        public bool Equals(Entity x, Entity y)
        {
            return x.Id == y.Id;
        }

        public int GetHashCode(Entity obj)
        {
            return obj.Id.GetHashCode();
        }
    }

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class TypeHelpers
	{
		public static Type GetType(string name, Type assemblyScope = null)
		{
			return assemblyScope == null
				? AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetTypes())
					.FirstOrDefault(e => e.AssemblyQualifiedName == name || e.FullName == name || e.Name == name)
				: assemblyScope.Assembly.GetTypes()
					.FirstOrDefault(e => e.AssemblyQualifiedName == name || e.FullName == name || e.Name == name);
		}
	}

	public partial class EntityContract
	{
		public TCrmEntity ConvertTo<TCrmEntity>(ClearMode? clearMode = null) where TCrmEntity : Entity
		{
			// create CRM entity object
			var crmRecord = Activator.CreateInstance<TCrmEntity>();

			var entityType = GetType();
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception($"Entity '{entityType.Name}' doesn't map to CRM entity '{typeof(TCrmEntity).Name}'.");
			}

			clearMode = clearMode
				?? (ClearMode?)entityType.GetProperty("ValueClearMode")?.GetValue(this)
					?? ClearMode.Disabled;

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>() != null;
				// get the clear flag mode value if it exists
				var isClearFlag = clearMode == ClearMode.Flag
					&& (bool?)entityType.GetProperties().Where(fieldQ => fieldQ.Name == "Clear_" + field.Name)
						.Select(fieldQ => fieldQ.GetValue(this)).FirstOrDefault() == true;
				// check 'empty' mode
				var isClearEmpty = clearMode == ClearMode.Empty;
				var isClearConvention = clearMode == ClearMode.Convention;

				var isSetValue = value != null || isClearFlag || isClearEmpty || isClearConvention;

				// skip if no value and clear mode does not match and pass check
				if (isReadOnly || !isSetValue)
				{
					continue;
				}

				SetValueInCrmRecord(value, crmRecord, field.Name, mapping, clearMode, isClearFlag);
			}

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var field in GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || (value == null && clearMode != ClearMode.Empty) || value is Array)
				{
					continue;
				}

				SetRelationInRecord(value, field);
			}

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				// get the value of the field
				var value = relation.GetValue(this);
				// is the relation read only
				var isReadOnly = relation.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || value == null || (value is Array && ((Array)value).Length <= 0))
				{
					continue;
				}

				SetRelationInCrmRecord(value, crmRecord, mapping, clearMode);
			}

			return crmRecord;
		}

		private void SetRelationInRecord(object value, PropertyInfo propertyInfo)
		{
			// get the property representing the relationship
			var relation = GetType().GetProperties()
				.Where(fQ => !Attribute.IsDefined(fQ, typeof(CrmFieldMappingAttribute))
					&& Attribute.IsDefined(fQ, typeof(CrmRelationMappingAttribute)))
				.FirstOrDefault(
					fQ =>
					{
						var rAttr = fQ.GetCustomAttribute<CrmRelationMappingAttribute>();
						var relationAttr = propertyInfo.GetCustomAttribute<CrmRelationMappingAttribute>();
						return rAttr.SchemaName == relationAttr.SchemaName && rAttr.Role == relationAttr.Role;
					});

			if (relation == null)
			{
				return;
			}

			// get the related entity type
			var type = relation.PropertyType;
			// get the target property in the related entity to set the value
			var mappedProperty = type.GetProperties()
				.Where(fQ => Attribute.IsDefined(fQ, typeof(CrmFieldMappingAttribute))
					&& !Attribute.IsDefined(fQ, typeof(CrmRelationMappingAttribute)))
				.FirstOrDefault(p => p.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName
					== propertyInfo.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName);

			if (mappedProperty == null)
			{
				return;
			}

			// get the relation value
			var record = relation.GetValue(this);

			if (record == null)
			{
				// create a new instance of the related entity if it's null
				record = Activator.CreateInstance(type);
				// save the relation object in this entity
				relation.SetValue(this, record);
			}

			// set the field value in the related record
			mappedProperty.SetValue(record, value);
		}

		private static void SetValueInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			string fieldName, CrmFieldMappingAttribute mapping, ClearMode? clearMode = null, bool isClearFlag = false)
			where TCrmEntity : Entity
		{
			var crmProperty = GetCrmProperty<TCrmEntity>(mapping);

			if (crmProperty == null)
			{
				return;
			}
            
			// if no value, and clear mode is global or flagged, then clear
			if (value == null && (clearMode == ClearMode.Empty || isClearFlag))
			{
				crmRecord[mapping.LogicalName] = null;
			}
            
			// convert types
			if (value is Enum)
			{
			    // if clear mode is convention, and value fits convention, then clear
				var intVal = Convert.ToInt32(value);
				crmRecord[mapping.LogicalName] =
					(intVal == -1 && clearMode == ClearMode.Convention)
						? null
						: new OptionSetValue(intVal);
			}
			else if (value is decimal && crmProperty.PropertyType == typeof(Money))
			{
				crmRecord[mapping.LogicalName] =
					(value.Equals(decimal.MinValue) && clearMode == ClearMode.Convention)
						? null
						: new Money(((decimal?)value).Value);
			}
			else if (value is Guid && fieldName != "Id" && crmProperty.PropertyType == typeof(Guid?))
			{
				crmProperty.SetValue(crmRecord,
					(value.Equals(Guid.Empty) && clearMode == ClearMode.Convention)
						? null
						: (Guid?)value);
			}
			else if (value is LookupValue)
			{
				var lookupValue = (LookupValue)value;

				if (crmProperty.PropertyType == typeof(LookupValue))
				{
					crmProperty.SetValue(crmRecord,
						(lookupValue.Id.Equals(Guid.Empty) && clearMode == ClearMode.Convention)
							? null
							: value);
				}
				else if (crmProperty.PropertyType == typeof(EntityReference))
				{
					crmProperty.SetValue(crmRecord,
						(lookupValue.Id.Equals(Guid.Empty) && clearMode == ClearMode.Convention)
							? null
							: new EntityReference(lookupValue.EntityName, lookupValue.Id));
				}
			}
			else
			{
			    // if clear mode is convention, and value fits convention, then clear
			    if (clearMode == ClearMode.Convention
                    && ((value is DateTime && value.Equals(new DateTime(1970, 1, 1)))
                        || (value is int && value.Equals(int.MinValue))
                        || (value is long && value.Equals(long.MinValue))
                        || (value is decimal && value.Equals(decimal.MinValue))
                        || (value is double && value.Equals(double.MinValue))
                        || (value is Array && (value as Array).Length <= 0)
                        || (value is string && value.Equals(""))))
			    {
				    crmProperty.SetValue(crmRecord, null);
			    }
                else
				{
                    crmProperty.SetValue(crmRecord, value);
                }
			}
		}

		/// <summary>
		///     Gets the property from the CRM entity that corresponds to this field -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmProperty<TCrmEntity>(CrmFieldMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmProperty = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var fieldAttribute = propertyQ
										.GetCustomAttributes<AttributeLogicalNameAttribute>(true)
										.FirstOrDefault();

									return fieldAttribute != null
										   && fieldAttribute.LogicalName == mapping.LogicalName;
								});

			return crmProperty;
		}

		private static void SetRelationInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			CrmRelationMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmRelation = GetCrmRelation<TCrmEntity>(mapping);

			// if relation not found, then the entities don't map correctly
			if (crmRelation == null)
			{
				throw new Exception($"Entity doesn't map to CRM entity '{typeof(TCrmEntity).Name}'.");
			}

			object convertedValue = null;

			var type = TypeHelpers.GetType(mapping.RelatedEntityName);

			if (type == null)
			{
				throw new TypeLoadException($"Could not find type {mapping.RelatedEntityName} to convert contract record.");
			}

			// x-N relation
			if (value is Array)
			{
				var relatedRecords = (Array)value;
				// create an array for the related entities of the appropriate type
				var crmRelatedRecords = Array.CreateInstance(type, relatedRecords.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = GetConversionMethod(relatedRecords.GetValue(0), type);

				if (method == null)
				{
					return;
				}

				// convert all entities to CRM entities
				var objectCrmRelatedRecords =
					(from object relatedRecord in relatedRecords
					 select method.Invoke(relatedRecord, new object[] { clearMode })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectCrmRelatedRecords, crmRelatedRecords, crmRelatedRecords.Length);
				convertedValue = crmRelatedRecords;
			}
			else if (value is EntityContract)
			{
				// N-1 relation
				var method = GetConversionMethod(value, type);

				if (method == null)
				{
					return;
				}

				convertedValue = method.Invoke(value, new object[] { clearMode });
			}

			// set the related entities value in the CRM entity
			crmRelation.SetValue(crmRecord, convertedValue);
		}

		private static MethodInfo GetConversionMethod(object entity, Type relatedType)
		{
			return entity.GetType().GetMethod("ConvertTo")?.MakeGenericMethod(relatedType);
		}

		/// <summary>
		///     Gets the relation from the CRM entity that corresponds to this relation -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmRelation<TCrmEntity>(CrmRelationMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmRelation = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var relationAttribute = propertyQ
										.GetCustomAttributes<RelationshipSchemaNameAttribute>(true)
										.FirstOrDefault();

									return relationAttribute != null
										   && relationAttribute.SchemaName == mapping.SchemaName
										   && relationAttribute.PrimaryEntityRole == (EntityRole?)mapping.Role;
								});

			return crmRelation;
		}
	}

	#endregion


	#region Actions

	#endregion

	#region Known Types

	#endregion

	#region Entities

	#region CustomMessage

	/// <summary>
	/// 'ys_custommessage'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ys_custommessage")]
	public partial class CustomMessage : GeneratedEntity<CustomMessage.RelationName>
	{
		public CustomMessage() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public CustomMessage(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public CustomMessage(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Custom Message";
		public const string SchemaName = "ys_custommessage";
		public const string EntityLogicalName = "ys_custommessage";
		public const int EntityTypeCode = 10130;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("ys_custommessageid")]
		public override System.Guid Id
		{
			get => (CustomMessageId == null || CustomMessageId == Guid.Empty) ? base.Id : CustomMessageId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ys_custommessageid");
                    base.Id = value;
                } else {
				    CustomMessageId = value;
                }
			}
		}

		[AttributeLogicalName("ys_categoryvalue")]
		public CategoryEnum? Category
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ys_categoryvalue");
				return (CategoryEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ys_categoryvalue", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ys_categoryvalue", value);
			}
		}

        /// <summary>
        ///  
		/// 'ys_custommessageId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ys_custommessageid")]
		public Guid? CustomMessageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ys_custommessageid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("ys_custommessageid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

		[AttributeLogicalName("ys_modulevalue")]
		public ModuleEnum? Module
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ys_modulevalue");
				return (ModuleEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ys_modulevalue", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ys_modulevalue", value);
			}
		}

        /// <summary>
        /// [Required][MaxLength=100] 
		/// 'ys_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ys_name")]
		public string ID
		{
			get
			{
				var value = GetAttributeValue<string>("ys_name");
			    return value;
			}
			set
			{
                SetAttributeValue("ys_name", value);
			}
		}

		[AttributeLogicalName("ys_sourcevalue")]
		public SourceEnum? Source
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ys_sourcevalue");
				return (SourceEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ys_sourcevalue", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ys_sourcevalue", value);
			}
		}

		[AttributeLogicalName("ys_subcategoryvalue")]
		public SubcategoryEnum? Subcategory
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ys_subcategoryvalue");
				return (SubcategoryEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ys_subcategoryvalue", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ys_subcategoryvalue", value);
			}
		}

		#endregion

		#region Relationships

		
		public static class RelationNames {
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public CustomMessage(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["ys_custommessageid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum CategoryEnum
		{
			Generic = 100,
			Validation = 101,
			Routing = 102,
			Query = 103,
			Configuration = 104,
			ProcessFlow = 105,
			Integration = 106,
		}
	
		public enum ModuleEnum
		{
			Generic = 100,
			Master = 101,
			Configuration = 102,
			Routing = 103,
			Documents = 105,
		}
	
		public enum SourceEnum
		{
			Unknown = 10,
			CRM = 11,
			API = 12,
			Portal = 13,
		}
	
		public enum SubcategoryEnum
		{
			Generic = 717860000,
			Validation = 717860001,
			Routing = 717860002,
			Query = 717860003,
			Integration = 717860004,
			Create = 717860005,
			Update = 717860006,
			MissingRecord = 717860007,
			MissingValue = 717860008,
			Data = 717860009,
		}
	
		#endregion

		#region Metadata


		#endregion
	}

	#endregion

	#endregion

	#region GlobalEnums

	public class GlobalEnums
	{
	}

	#endregion

}

